# %%
#del/s/ah desktop.ini

# %%
from tensorflow.compat.v1 import ConfigProto
from tensorflow.compat.v1 import InteractiveSession

config = ConfigProto()
config.gpu_options.per_process_gpu_memory_fraction = 0.5
config.gpu_options.allow_growth = True
session = InteractiveSession(config=config)

# %%


from tensorflow.keras.layers import Input, Lambda, Dense, Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.applications.inception_v3 import InceptionV3

from tensorflow.keras.applications.inception_v3 import preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img
from tensorflow.keras.models import Sequential
import numpy as np
from glob import glob


# %%
# re-size all the images to this
IMAGE_SIZE = [224, 224]

temp1 = r'C:\Users\lenovo\OneDrive - mgmtech\Documents\MIT WPU\4. FY\Capstone\Pharmaceutical and Biomedical Waste (PBW)\Train Images'
temp2 = r'C:\Users\lenovo\OneDrive - mgmtech\Documents\MIT WPU\4. FY\Capstone\Pharmaceutical and Biomedical Waste (PBW)\Test Images'
converted_path1 = temp1.replace("\\", "/")
train_path = converted_path1
converted_path2 = temp2.replace("\\", "/")
valid_path = converted_path2
print(train_path)

# %%


inception = InceptionV3(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)




# %%

for layer in inception.layers:
    layer.trainable = False

# %%
  # useful for getting number of output classes
folders = glob('C:/Users/lenovo/OneDrive - mgmtech/Documents/MIT WPU/4. FY/Capstone/Pharmaceutical and Biomedical Waste (PBW)/Train Images/*')

# %%
folders

# %%

x = Flatten()(inception.output)

# %%
prediction = Dense(len(folders), activation='softmax')(x)


model = Model(inputs=inception.input, outputs=prediction)

# %%

model.summary()


# %%

model.compile(
  loss='categorical_crossentropy',
  optimizer='adam',
  metrics=['accuracy']
)


# %%

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

# %%
# Make sure you provide the same target size as initialied for the image size
training_set = train_datagen.flow_from_directory('C:/Users/lenovo/OneDrive - mgmtech/Documents/MIT WPU/4. FY/Capstone/Pharmaceutical and Biomedical Waste (PBW)/Train Images',
                                                 target_size = (224, 224),
                                                 batch_size = 32,
                                                 class_mode = 'categorical')

# %%
test_set = test_datagen.flow_from_directory('C:/Users/lenovo/OneDrive - mgmtech/Documents/MIT WPU/4. FY/Capstone/Pharmaceutical and Biomedical Waste (PBW)/Test Images',
                                            target_size = (224, 224),
                                            batch_size = 32,
                                            class_mode = 'categorical')

# %%

r = model.fit(
    training_set,
    validation_data=test_set,
    epochs=10,
    steps_per_epoch=len(training_set),
    validation_steps=len(test_set))

# %%
import matplotlib.pyplot as plt

# %%

plt.plot(r.history['loss'], label='train loss')
plt.plot(r.history['val_loss'], label='val loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')

plt.plot(r.history['accuracy'], label='train acc')
plt.plot(r.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')

# %%


from tensorflow.keras.models import load_model

model.save('model_inception_Test.h5')

# %%


# %%

y_pred = model.predict(test_set)


# %%
y_pred

# %%
import numpy as np
y_pred = np.argmax(y_pred, axis=1)

# %%
y_pred

# %%
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

# %%
model=load_model('model_inception.h5')

# %%
img=image.load_img('C:/Users/lenovo/OneDrive - mgmtech/Documents/MIT WPU/4. FY/Capstone/Github/Capstone/Test Images/test img.jpeg',target_size=(224,224))



# %%
x=image.img_to_array(img)
x

# %%
x.shape

# %%
x=x/255

# %%
import numpy as np
x=np.expand_dims(x,axis=0)
img_data=preprocess_input(x)
img_data.shape

# %%
model.predict(img_data)

# %%
a=np.argmax(model.predict(img_data), axis=1)

# %%
a==1

# %%
import tensorflow as tf

# %%
tf.__version__

# %% [markdown]
# 

# %%

predictions = model.predict(img_array)
predicted_class = np.argmax(predictions, axis=1)  
class_labels = training_set.class_indices  
class_labels = {v: k for k, v in class_labels.items()}  


print(f"Predicted class: {class_labels[predicted_class[0]]}")

# %%
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.inception_v3 import preprocess_input

img_path = 'C:/Users/lenovo/OneDrive - mgmtech/Documents/MIT WPU/4. FY/Capstone/Github/Capstone/Test Images/test img.jpeg'  # Change this to your image filename
img = image.load_img(img_path, target_size=(224, 224))  
img_array = image.img_to_array(img)  
img_array = np.expand_dims(img_array, axis=0)  
img_array = preprocess_input(img_array)  


predictions = model.predict(img_array)
predicted_class = np.argmax(predictions, axis=1)  

class_labels = training_set.class_indices  
class_labels = {v: k for k, v in class_labels.items()}  


plt.imshow(image.load_img(img_path))  
plt.axis('off') 
plt.title(f"Predicted: {class_labels[predicted_class[0]]}", fontsize=14, color='blue')  # Display class
plt.show()


